好的教程：
使用gdb调试c++程序 - 高胖 - 博客园
https://www.cnblogs.com/gaopang/p/11588683.html

----------------------------------------------------------------------
生成core文件的条件
1、ulimit -c unlimited 解除数据段长度限制（当前终端生效）
2、有装core文件的文件夹，系统默认的会因为权限问题无法生成
   查看当前core文件的生成路径：cat /proc/sys/kernel/core_pattern
   改变生成路径：
   ① /etc/sysctl.conf  最后一行增加 kernel.core_pattern= ${path} 以指定corefile生成路径，reboot后生效
   ② sudo bash -c "echo ${path} > /proc/sys/kernel/core_pattern " 直接设置core文件的生成路径，临时的

打开core文件：gdb ${filepath} ${corefile}

----------------------------------------------------------------------
把gdb的打印输出到文件 3种
1： gdb xxx | tee -a "file"
2： run arg1 arg2 ... >output.log
3:(gdb) set logging file <file name>
  (gdb) set logging on
  (gdb) info functions
  (gdb) set logging off

----------------------------------------------------------------------
gdb指令
(gdb) break xxx
(gdb) b xxx	在源代码指定的某一行设置断点，其中 xxx 用于指定具体打断点的位置
----------------------------------------------------------------------
(gdb) run
(gdb) r	执行被调试的程序，其会自动在第一个断点处暂停执行。<r arg1 arg2 ...>
----------------------------------------------------------------------
(gdb) continue
(gdb) c	当程序在某一断点处停止运行后，使用该指令可以继续执行，直至遇到下一个断点或者程序结束。
----------------------------------------------------------------------
(gdb) next
(gdb) n	令程序一行代码一行代码的执行。
----------------------------------------------------------------------
(gdb) print xxx
(gdb) p xxx	打印指定变量的值，其中 xxx 指的就是某一变量名。
----------------------------------------------------------------------
(gdb) list
(gdb) l	显示源程序代码的内容，包括各行代码所在的行号。
----------------------------------------------------------------------
(gdb) quit
(gdb) q	终止调试。
----------------------------------------------------------------------
