[增加路径环境变量]
1、在/etc/profile增加export PATH="$PATH:/home/" 全局加
2、在~/.bashrc增加export PATH="$PATH:/home" 为选择用户加
3、export PATH=/home:$PATH 临时增加
修改后使用source profile使修改生效
------------------------------------------------------


[git加速网站]
git clone https://ghproxy.com/+git地址
---------------------------------------------------------


[常用命令]

grep 筛选文本内容：
grep ‘Tech|Sales’ employee.txt 不加参数直接筛选
grep -E ‘Tech|Sales’ employee.txt -E:选项可以用来扩展选项为正则表达式(== egrep ‘Tech|Sales’ employee.txt)
grep -e Tech -e Sales employee.txt -e:只能接一个关键字
grep -E ‘Dev.*Tech’ employee.txt .*：与运算
egrep ‘Manager|Developer’ employee.txt | grep -v Sales -v:反选，不包含后面关键字的
grep -i 忽略大小写
---------------------------------------------------------------------------


[ps 查看进程]
ps -ef 和ps -aux 功能差不多，只是显示的内容略微不同
ps -eo vsz,pid,pcpu,lstart,args | grep '待查找的信息' <lstart:开始进程的时间 args:开始进程的指令>
---------------------------------------------------------------------------


[反引号 ``]
rosrun rviz rviz -d `rospack find turtle_tf`/rviz/turtle_rviz.rviz 把指令输出当语句
---------------------------------------------------------------------------


[tee]
-a, --append append to the given FILEs, do not overwrite
-i, --ignore-interrupts ignore interrupt signals

tee -a ~/gdblog/`date "+%Y-%m-%d %H:%M:%s"`.txt 把输出的文件名设置为当前时间
----------------------------------------------------------------------------


[find]
find [路径] [表达式选项] [行动]
[表达式选项]
-mount, -xdev	只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件
-amin n	在过去 n 分钟内被读取过
-anewer file	比文件 file 更晚被读取过的文件
-atime n	在过去n天内被读取过的文件
-cmin n	在过去 n 分钟内被修改过
-cnewer file	比文件 file 更新的文件
-ctime n	在过去n天内被修改过的文件
-empty	空的文件-gid n or -group name
-ipath p, -path p	路径名称符合 p 的文件，ipath 会忽略大小写
-name name, -iname name	文件名称符合 name 的文件。iname 会忽略大小写
-size n	文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。
-type b/d/c/p/l/f	查是块设备、目录、字符设备、管道、符号链接、普通文件
-perm	按执行权限来查找
-user username	按文件属主来查找
-group groupname	按组来查找
-depth	指定查找目录深度
-follow	如果遇到符号链接文件，就跟踪链接所指的文件
-prune	忽略某个目录
-maxdepth	指定查找目录最大深度
-mindepth	指定查找目录最小深度
-version	查看版本
-help	获取帮助
[多条件组合]
-o	是或者的意思
-a	是而且的意思
-not	是相反的意思

[行动]
-delete	删除查找到的文件
-exec command	对查找到的文件执行command命令
-ok command	执行命令前需要进行确认
-printf	格式化输出

-------------------------------------------------------------

[dpkg]
强制安装：dpkg -i --force-overwrite xxx.deb
--------------------------------------------------------------

[一些宏的使用]
mkdir "$(date +%y)"
---------------------------------------------------------------


[遇见的一些问题]
♥ 解决apt的时候报错“server certificate verification failed”
sudo touch /etc/apt/apt.conf.d/99verify-peer.conf
&& sudo echo >>/etc/apt/apt.conf.d/99verify-peer.conf "Acquire { https::Verify-Peer false }"


♥ 删除python导致无法启动图形界面，且无法联网
解决：
1. 输入账户密码（输入密码时注意小键盘是否开启）
2. 安装桌面
sudo apt-get install ubuntu-desktop
如果无效，接着进行第三步。
这里发现根本就没有下载资源安装成功。
3. 先连接网络再装桌面
（1）连接网络
# 尝试联网
sudo dhclient eth0
# 如果显示cannot find device "eth0"
# 执行以下命令查看网卡名称
dmesg | grep eth
# 发现eth0被重命名成了ens33
# ens33：renamed from eth0
# 重新联网
sudo dhclient ens33
# 测试是否成功
ping www.baidu.com


♥ 网络图标消失
原因一 ：NetworkManager 未接管网络
解决办法：nmcli networking on
原因：
在终端中输入以下命令，查看 NetworkManager 是否接管了网络：

nmcli networking
如果输出 disabled，则表示 NetworkManager 未接管网络，网络图标消失也是由此导致的。

查看网卡，则会提示“未托管”：

[root@localhost ~]# nmcli device status
DEVICE TYPE STATE CONNECTION
ens33 ethernet 未托管 –
连接网卡（以 ens33 网卡为例），会提示失败：

[root@localhost ~]# nmcli device connect ens33
错误：添加/激活新连接失败：Connection ‘ens33’ is not available on device ens33 because device is strictly unmanaged

原因二：NetworkManager 未运行
解决办法：systemctl restart NetworkManager
原因：
在终端中输入以下命令，查看 NetworkManager 的运行状态：
systemctl status NetworkManager
如果显示Active: inactive (dead)，则表示 NetworkManager 未运行

再次查看 NetworkManager 的运行状态会显示：Active: active (running)。
建议将 NetworkManager 设为开机自启：
systemctl enable NetworkManager
查看是否开机启动：
systemctl is-enabled NetworkManager

原因三： 网络开关是关闭状态 显示 wired off
以 centos 8 为例，点击右上角的小三角，点击 connect 开启网络就可以了。
我发现每次开机都要去手动点一下，机器才能有网。得执行一下
sed –i s/ONBOOT=no/ONBOOT=yes/ /etc/sysconfig/network-scripts/ifcfg-ens33
将网卡设置为开机自启就会自动联网了。
-------------------------------------------------------------------------

[cmake交叉编译]
在cmake目录下建立工具链文件（toolchain file），习惯上一般以.toolchain.cmake结尾
内容：
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR arm)
 
set(TOOLS /home/farmer/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux)
set(CMAKE_C_COMPILER "${TOOLS}/bin/arm-none-eabi-gcc")
set(CMAKE_CXX_COMPILER "${TOOLS}/bin/arm-none-eabi-g++")
set(CMAKE_AR "${TOOLS}/bin/arm-none-eabi-gcc-ar")
 
add_compile_options(-mthumb -mcpu=cortex-m4 -mfpu=fpv4-sp-d16 -mfloat-abi=hard -ffunction-sections -fdata-sections -g -Os -MMD -MP -Wall)

在build目录下要编译时，执行：
cmake -DCMAKE_TOOLCHAIN_FILE=../linux-arm.toolchain.cmake ../
# or
cmake ... -DCMAKE_TOOLCHAIN_FILE=<path/to/toolchain-file>


[某个软件加入自启动]
1、在/lib/systemd/system/目录创建服务脚本xxx.service，并编辑service文件
2、chmod 777 /lib/systemd/system/xxx.service
3、
#刷新配置(在启动前，必须先执行，否则报警告)
systemctl daemon-reload
#启动服务
systemctl start mongodb
#关闭服务
systemctl stop mongodb
#服务加入开机自启
systemctl enable  mongodb
#查看状态（可查看进程打印）
systemctl status mongodb


[增加硬盘容量后，linux扩容]
1、备份： 虚拟机->快照->拍摄快照
2、sudo df -h 查看分区信息，找到需要改变的盘
3、sudo fdisk /dev/sdx
4、输入分区号码删除分区
5、输入p，回车
6、回车，选择开始区域为默认区域
7、回车，选择结束区域为默认区域
8、y
9、p
10、w
11、reboot
12 sudo resize2fs /dev/sdx
13、df -h 查看是否分配好了


[autoreconf的使用]
生成configure文件后
./configure --prefix=/usr --enable-static
