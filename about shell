[常用参数]
echo -n :表示不换行输出
echo -e :输出转义字符，把转义后的内容输出到屏幕上
break跳出单个循环
continue中止某次循环中的命令，但不会完全中止整个命令
IFS字段分隔符
-查看命令：set | grep IFS
-设置查看内容IFS=$' \t\n'
-修改成只换行
 IFS=$'\n'
-IFS=:
-IFS=','
-IFS.OLD=$IFS
-IFS=$'\n'
...
-IFS=$IFS.OLD
-输出环境变量PATH所包含的所有目录以及其中的所有可执行文件

常用的转义字符如下：
\b 转义后相当于按退格键（backspace) ,但前提是“\b”后面存在字符；“\b”表示删除前一个字符
\c 不换行输出，在“\c”后面不存在字符的情况下，作用相当于echo -n ; 但是当“\c”后面仍让存在字符时，“\c”后年的字符将不会被输出。
\n 换行，被输出的字符从“\n”处开另起一行
\f 换行，但是换行后的新行的开头位置连接着上一行的结尾
\v 与\ f 相同原理
\t 转以后表示插入tab ， 即横向制表符
\r 光标移至首行，但不换行， 相当于使用“ \r ”以后的字符覆盖“\r”之前同等长度的字符；但是当“\r”后面不存在任何字符时，“\r”前面的字符不会被覆盖
\ 表示插入“\”本身

[shell 脚本 参数传递]
$#	传递到脚本的参数个数
$*	以一个单字符串显示所有向脚本传递的参数。
     如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
$$	脚本运行的当前进程ID号
$!	后台运行的最后一个进程的ID号
$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。
    如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
$-	显示Shell使用的当前选项，与set命令功能相同。
$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
$* 与 $@ 区别: 相同点：都是引用所有参数。
               不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。
例1
#!/bin/bash
echo "Shell 传递参数实例！";
echo "第一个参数为：$1";
echo "参数个数为：$#";
echo "传递的参数作为一个字符串显示：$*";

例2
#!/bin/bash
echo "Shell 传递参数实例！";
echo "执行的文件名：$0";
echo "第一个参数为：$1";
echo "第二个参数为：$2";
echo "第三个参数为：$3";

[for]
#for语句结构
for 变量名 in 取值列表
do
  命令序列
done

⚪ 示例1：for循环的入门，一般都是从求和开始，下面就先就1~100的和。
#!/bin/bash
#
sum=0
for i in {1..100}
do
    sum=$[$i+$sum]
done
  echo "0-100的和为：" $sum

#如果算的是1~100之间每个两位数的和,即{1、3、5、7、...、99}，for循环如下： 
for i in {1..100..2}
#其他都是一样的。

⚪ 语句示例补充：下面是求1~100的和的不同表达。(都测试过，这里就不再贴图了，想试的可以复制试试)
格式一：
#!/bin/bash
#
sum=0
for i in $(seq 1 100)      #{1、3、5、...、99}相加为$(seq 1 2 100) 
do
    sum=$[$i+$sum]
done
  echo "0-100的和为：" $sum
格式二：  
#!/bin/bash
#
sum=0
for ((i=1;i<=100;i++))     #隔一个相加， for ((i=1;i<100;i+=2))
do
    sum=$[$i+$sum]
done
  echo "0-100的和为：" $sum

⚪ 示例2:批量添加用户,用户名存放在users.txt文件中，每行一个;初始密码均设为123456
#!/bin/bash
#
a=`cat ~/test/users.txt`
for i in $a
do
  useradd $i
  echo "123456" | passwd --stdin $i &>/dev/null
done

⚪ 示例3:根据IP地址检查主机状态;IP地址存放在ipadds.txt文件中，每行一个;
#!/bin/bash
#
a=`cat ~/test/ipadds.txt`

for i in $a
do
  ping -c 3 -i 0.5 -W 2 $i &>/dev/null
  if [ $? -eq 0 ];then
    echo "$i 主机在线"
  else
    echo "$i 主机不在线"
  fi
done


[while语句结构]
while 条件测试操作
do
  命令序列
done

⚪ 示例1:批量添加用户; 用户名称以stu开头，按数字顺序进行编号; 
一共添加20个用户，即stu1、stu2、......、stu20 
初始密码均设为123456
#!/bin/bash
#
i=1
while [ $i -le 20 ]
do
  useradd stu$i
  echo "123456" | passwd --stdin $i &>/dev/null
  let i++
done

⚪ 示例2:猜商品价格游戏；通过变量RANDOM获得随机数；提示用户猜测并记录次数，猜中后退出循环
#我这里还加了if语句填了一点其他元素。
#!/bin/bash
#
a=$(expr ${RANDOM} % 1000)
i=0
while true
do
  read -p "猜猜看我想的是哪个数，范围在0~999。" shu
  let i++
  if [ $shu -eq $a ];then
      if [ $i -le 10 ];then
        echo "太强了，你猜了$i 次就猜中了，可惜没得奖励。"
      else
        echo "猜了$i 次才猜中，你还差的远呢" 
      fi
    exit 0
  elif [ $shu -lt $a ];then
        if [ $(expr $a - $shu) -le 5 ] ;then
          echo "虽然数小了，但已经很近了，你在想想"
        else
          echo "不好意思，猜的太小了"
        fi
  else
       if [ $(expr $shu - $a) -le 5 ];then
         echo "虽然数大了，但已经很近了，你在考虑考虑"
       else
         echo "不好意思，猜大了，数再小点"
       fi
  fi
done

[until循环语句]
⚪ 示例:计算1~50的和值;通过循环累加的方式计算1~50的和值
  
#!/bin/bash
#
a=0
sum=0
until [ $a -gt 100 ]
do
  sum=$[$sum+$a]
  let a++
done
echo "1-100的和为：$sum"

