LifecycleNode(用来管理节点)。这种节点有点像是状态机，会在几种不同的状态中切换
♦ 分为基本状态和切换状态
♦ ♦ 基本状态是任何节点都可以做相应的任务的稳态，切换状态切换过程中短暂的临时状态。
♦ ♦ 这些中间状态的结果用于指示两个主要状态之间的转换是否成功


♦ 主要有5个概念:
♦ ♦ 状态机
♦ ♦ ♦ 工作流程：
♦ ♦ ♦ ♦ create()->configure()->[inactive?]->activate()->[Activating]->[Active]
♦ ♦ ♦ ♦ decative()->[Deactivating]->[Inactive]->cleanup()->[ClearningUp]->[Unconfigure]->[ShuttingDown]

♦ ♦ 状态：分为主要状态和次要状态
♦ ♦ ♦ 主要状态 - 稳态。 一个节点大部分时间都是此类状态：
♦ ♦ ♦ ♦ 未配置 - 节点开始时的第一个状态，并在出现错误后结束。没有执行，其主要目的是错误恢复。
♦ ♦ ♦ ♦ 非活跃 - 节点持有资源（发布者、监听者等）和配置（参数、内部变量），但什么也不做。 没有执行，没有传输，传入的数据可以保存在缓冲区中，但不能读取。 主要目的是允许重新配置。
♦ ♦ ♦ ♦ 活跃 - 一切正常。 正常执行。
♦ ♦ ♦ ♦ 已完成 - 节点已被销毁。 仅用于调试。

♦ ♦ ♦ 次要状态 - 瞬态。 处理过渡，执行标准化的回调函数。用户代码在此处实现：
♦ ♦ ♦ ♦ 配置 - 执行 onConfigure() - 加载配置、冗长的设置步骤、获取节点生命周期内使用的资源，如常量发布者/侦听器、内存缓冲区分配等…
♦ ♦ ♦ ♦ 清理 - 执行 onCleanup() - 放弃资源，擦除内存。 新的开始，清理状态。
♦ ♦ ♦ ♦ 激活 - 执行 onActivate() - 获取传感器等短期资源，激活所有资源。 设置时间短。 启动主节点任务。
♦ ♦ ♦ ♦ 停用 - 执行 onDeactivate() - 反向Activatingsteps（反激活）。 暂停执行，释放短期资源。
♦ ♦ ♦ ♦ 关闭 - 执行 onShutdown() - 最后步骤。 删除剩下的资源等。 没有信息从此处回来。
♦ ♦ ♦ ♦ 错误处理 - 执行 onError() - 错误处理状态。 如果错误可以处理，则恢复到 Unconfigured，否则，转到 Finalized 销毁节点。

♦ ♦ ♦ 转换 - 触发状态更改。 用户可以通过启动文件、管理器节点和 CLI 服务调用等方式实现。
♦ ♦ ♦ ♦ 标准接口：
♦ ♦ ♦ ♦ ♦ 服务：
♦ ♦ ♦ ♦ ♦ ♦ /change_state - 调用触发合法转换
♦ ♦ ♦ ♦ ♦ ♦ /get_available_transitions - 显示合法的转换
♦ ♦ ♦ ♦ ♦ ♦ /get_state - 显示当前状态
♦ ♦ ♦ ♦ ♦ ♦ /get_available_states - 列出所有状态
♦ ♦ ♦ ♦ ♦ ♦ /get_transition_graph - 显示完整状态机
♦ ♦ ♦ ♦ ♦ 主题：
♦ ♦ ♦ ♦ ♦ ♦ /<node_name>__transition_event - 发布正在进行的转换
♦ ♦ ♦ ♦ 生命周期命令行接口：





♦ ♦ 状态
♦ ♦ 标准接口
♦ ♦ 命令行接口（CLI）
♦ ♦ 启动文件
