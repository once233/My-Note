ControllerServer 内部的操作都封装成了一个个状态

[名词]
控制器服务器 Controller Server
[nav2_controller_server]
输入：全局路径，代价地图
输出：速度指令
默认为 DWB 控制器。
发布速度：~/cmd_vel (geometry_msgs/Twist)
包含多个插件：
轨迹生成器插件 DWB Controller
评分插件 Critic Plugins
目标检查器插件 Goal Checker

DWB控制器 DWB Controller(local planner)
轨迹生成器插件
负责生成局部轨迹并输出指令速度。
目前有两个插件（一次只能加载一个）：
标准轨迹生成器
有限加速器

评分插件 Critic Plugins
对轨迹生成器生成的轨迹进行评分。 可以加载多个插件并将它们的分数添加到每个轨迹的最终分数中。
示例：
BaseObstacle：基于路径经过代价地图的位置
ObstacleFootprint：基于验证机器人足迹上的所有点都没有接触到代价地图中标记的障碍物。
GoalDist：基于轨迹使机器人与目标姿势的接近程度。

目标检查器 Goal Checker
验证机器人是否达到了目标
目前有两个插件（一次只能加载一个）：
SimpleGoalChecker - 检查位置以查看机器人是否已达到目标。
StoppedGoalChecker - 检查位置以及机器人是否已停止。




[构造函数]
1. 声明以下参数为默认值
  controller_frequency
  progress_checker_plugin
  goal_checker_plugins
  controller_plugins【官方源码中，默认值为构造时赋的default_ids_】
  min_x_velocity_threshold
  min_y_velocity_threshold
  min_theta_velocity_threshold
  speed_limit_topic
  failure_tolerance
2.构造costmap的对象
3.构造nav2_util::NodeThread对象，并把costmap对象传入Thread对象



[各种状态执行的函数]
on_configure：(如果参数服务器的值为默认值，则配置一些默认参数，和初始化costmap、goal_checker、controller[localplanner]、actionserver，并订阅odom位置信息、speedlimit信息和创建cmd_vel速度发布器)
1. 获取当前server节点的指针：
2. 声明并初始化参数：
   有关：目标检查器插件
   ♦ 获取当前的checker_id，并判断当前的checker_id是不是等于默认的checker_id,如果是的话，声明默认。 progress_checker_id_
   ♦ 获取当前节点的目标检查器id，如果id没有被声明的话就声明对应id的目标检查器插件。 getting goal checker plugins
   ♦ 获取当前节点的控制器id，如果对应id的插件没被声明，则声明插件
   有关：控制器配置
   ♦ 获取controller_frequency
   ♦ 获取min_x_velocity_threshold
   ♦ 获取min_y_velocity_threshold
   ♦ 获取min_theta_velocity_threshold
   ♦ 获取speed_limit_topic
   ♦ 获取failure_tolerance
   
3. 配置costmap   

4. 实例化和初始化各种插件
  有关：目标检查器插件
  ♦ 从当前节点获取进程检查器插件的类型，再实例化当前类型的进程检查器和初始化
  ♦ 从当前节点获取目标点检查器插件的类型，再实例化当前类型的目标点检查器和初始化，最后把初始化好的目标点检查器加进管理检查器的容器
  有关：控制器插件
  ♦ 从当前节点获取控制器插件id的类型，并逐一实例化、配置参数
    controller->configure( node, controller_ids_[i],costmap_ros_->getTfBuffer(), costmap_ros_);
    最后把把当前控制器的id加入控制器id管理器
    【controller是DWB控制器，是基于ROS 1中localplanner和DWA控制器的继任者】
    官方介绍：
    The DWB controller is the successor to the base local planner and DWA controllers in ROS 1. It was created in ROS 1 by David Lu!! at Locus Robotics as part of the robot_navigation project.It was then ported to ROS 2 for use in Nav2 as its critic-based controller algorithm.
    DWB improves on DWA in a few major ways:
      -It implements plugin-based critics to allow users to specify new critic functions to use in the system. They can be dynamically reconfigured, reweighted, and tuned to gain very particular behavior in your robot system.
      -It implements plugin-based trajectory generation techniques, so that users can generate trajectories any number of ways and for any number of types of vehicles
      -Includes a number of plugin implementations for common use
    It is possible to tune DWB to gain both DWA and base local planner behaviors, as well as expansions using new plugins for totally use-case specific behaviors. The current trajectory generator plugins work for omnidirectional and differential drive robots, though an ackermann generator would be trivial to add. The current critic plugins work for both circular and non-circular robots and include many of the cost functions needed to build a path tracking system with various attributes.
    
    和ROS1 DWA控制器的区别：DWB是一个DWA算法的模块化实现。在ROS1 Navigation中，已经有一个dwa_local_planner的实现了。然而，在ROS1中，对于trajectory scoring的算法提炼却很少，而且是hardcode的，只能从是否会发生碰撞和是否达到目的地来评分，这不能反映实际导航中遇到的现实问题，譬如说路径的长短，机器人运动速度的稳定性，机器人朝向的稳定性等等。
    在DWB中，则是优化了这方面的评分标准，也在编码方法上做了很大改进，可以使用户定制的一些得分机制加入其中。
    在具体的ROS2 Navigation的实现当中，由于ROS2 Navigation使用的BT的task管理，ROS1 Navigation当中的move_base 跟nav_core相关的接口都被移除了，代之以行为树相关的接口实现。同时，完整地保留了DWB项目中关于Plugin的所有功能，可以启用系统自带的或者用户自己定制的plugin。这样的设计，也避免了ROS1 Navigation中一些代码的耦合太重的坏设计。
    详细见【DWBController】。
    
    

    
5. 实例化OdomSubscriber和位置信息发布器[create_publisher<geometry_msgs::msg::Twist>]

6. 实例化动作服务器
std::make_unique<ActionServer>(shared_from_this(),"follow_path",std::bind(&ControllerServer::computeControl, this),nullptr,std::chrono::milliseconds(500),true);
收到globalplan发送过来的goal后，controller如何工作：
1、	查找goal中的checker和controller的信息，匹配设备是否有对应的checker和controller，如果有，则为对应的controller设置对应的globalplan
2、	不断循环更新global path,并生成速度，进行速度控制



7. 创建速度限制信息的订阅
create_subscription<nav2_msgs::msg::SpeedLimit>(speed_limit_topic, rclcpp::QoS(10),std::bind(&ControllerServer::speedLimitCallback, this, std::placeholders::_1));

on_activate：
1. 让costmap_ros_、Controller、vel_publisher_、action_server_的状态变为激活
2、为节点增加动态改变参数的回调
3、创建bond纽带类，和节点管理器互相监控状态

on_deactivate：
1. 让动作服务器action_server_、控制器插件controller、cosmap_ros_停止工作
2. 发布速度设置为0的消息
3. 关闭速度控制发布器和重置动态设置参数的节点
4. 断开与节点的监听纽带

on_cleanup：
1. 把Controller释放掉，（和析构？）并把controllers记录器也清空
2. 把记录目标点检查器的容器清空
3. 如果costmap_ros_的状态为非激活状态，则清空costmap_ros_的数据
4. 重置动作服务器、odom数据订阅、costmap_thread、速度控制发布器vel_publisher_和速度限制订阅

on_shutdown:
打印关闭中并返回成功

回调细节待补充
